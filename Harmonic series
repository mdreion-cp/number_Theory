#include <bits/stdc++.h>
using namespace std;

/*
Problem: Counting Divisors (CSES 1713)
--------------------------------------
We need to answer queries: for a given number n, how many positive divisors does n have?

Approach:
- Precompute number of divisors for all numbers up to 1e6 using a sieve-like method.
- For every i (1..N), add +1 to all multiples of i.
- Complexity analysis:
    For i = 1 -> runs n times
    For i = 2 -> runs n/2 times
    For i = 3 -> runs n/3 times
    ...
    For i = n -> runs 1 time
    Total = n * (1/1 + 1/2 + 1/3 + ... + 1/n)
           = n * H(n), where H(n) is the n-th Harmonic number.
- And H(n) â‰ˆ log(n), so total = O(n log n).
*/

const int N = 1000000 + 5; // maximum number
int d[N];                  // d[x] = number of divisors of x

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    // Precompute divisors for all numbers
    for (int i = 1; i < N; i++) {
        for (int j = i; j < N; j += i) {
            d[j]++; // i is a divisor of j
        }
    }

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        cout << d[n] << '\n';
    }

    return 0;
}
